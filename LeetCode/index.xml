<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LeetCode on 凯的笔记</title>
    <link>https://kaizhang91.github.io/note/LeetCode/</link>
    <description>Recent content in LeetCode on 凯的笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language><atom:link href="https://kaizhang91.github.io/note/LeetCode/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>动态规划</title>
      <link>https://kaizhang91.github.io/note/LeetCode/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kaizhang91.github.io/note/LeetCode/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</guid>
      <description>一维 123 买卖股票的最佳时机 III 给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。设计一个算法来计算你所能获取的最大利润。你最多可以完成两笔交易。注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
 时间复杂度：\(O(n)\) 空间复杂度：\(O(K)\)  int max_profit(vector&amp;lt;int&amp;gt; &amp;amp;prices) {  int K = 2;  // dp[j][0]: 卖出 j 次的最大利润  // dp[j][1]: 买入 j 次的最大利润  int dp[K + 1][2];  for (int j = 0; j &amp;lt;= K; j++) {  dp[j][0] = 0;  dp[j][1] = INT_MIN;  }  for (auto price : prices) {  for (int j = 1; j &amp;lt;= K; j++) {  dp[j][0] = std::max(dp[j][0], dp[j][1] + price);  dp[j][1] = std::max(dp[j][1], dp[j - 1][0] - price);  }  }  return dp[K][0]; } 二维 44 通配符匹配 给定一个字符串 (s) 和一个字符模式 (p) ，实现一个支持 ?</description>
    </item>
    
    <item>
      <title>数字</title>
      <link>https://kaizhang91.github.io/note/LeetCode/%E6%95%B0%E5%AD%97/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kaizhang91.github.io/note/LeetCode/%E6%95%B0%E5%AD%97/</guid>
      <description>50 Pow(x, n) 实现 pow(x, n)，即计算 x 的 n 次幂函数。
快速幂 + 递归  时间复杂度：\(O(\log n)\) 空间复杂度：\(O(\log n)\)  double quick_pow(double x, long long N) {  if (N == 0) {  return 1.0;  } else {  double y = quick_pow(x, N / 2);  return N % 2 == 0 ? y * y : y * y * x;  } }  double my_pow(double x, int n) {  long long N = n;  return n &amp;gt;= 0 ?</description>
    </item>
    
    <item>
      <title>数组</title>
      <link>https://kaizhang91.github.io/note/LeetCode/%E6%95%B0%E7%BB%84/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kaizhang91.github.io/note/LeetCode/%E6%95%B0%E7%BB%84/</guid>
      <description>一维数组 未排序的数组 15 三数之和 给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有和为 0 且不重复的三元组。
 注意：答案中不可以包含重复的三元组。
  时间复杂度：\(O(n^2)\) 空间复杂度：\(O(\log n)\)  vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; three_sum(vector&amp;lt;int&amp;gt; &amp;amp;nums) {  std::sort(nums.begin(), nums.end());  vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; result;  int n = nums.size();  for (int i = 0; i &amp;lt; n; i++) {  if (i &amp;gt; 0 &amp;amp;&amp;amp; nums[i] == nums[i - 1]) {  continue;  }  int k = n - 1;  for (int j = i + 1; j &amp;lt; k; j++) {  if (j &amp;gt; i + 1 &amp;amp;&amp;amp; nums[j] == nums[j - 1]) {  continue;  }  while (k &amp;gt; j &amp;amp;&amp;amp; nums[k] + nums[j] &amp;gt; -nums[i]) {  k--;  }  if (k == j) {  break;  }  if (nums[j] + nums[k] == -nums[i]) {  result.</description>
    </item>
    
    <item>
      <title>树</title>
      <link>https://kaizhang91.github.io/note/LeetCode/%E6%A0%91/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kaizhang91.github.io/note/LeetCode/%E6%A0%91/</guid>
      <description>二叉树 98 验证二叉搜索树 给定一个二叉树，判断其是否是一个有效的二叉搜索树。
假设一个二叉搜索树具有如下特征：
 节点的左子树只包含小于当前节点的数。 节点的右子树只包含大于当前节点的数。 所有左子树和右子树自身必须也是二叉搜索树。  递归  时间复杂度：\(O(n)\) 空间复杂度：\(O(n)\)  bool helper(TreeNode *root, long long low, long long high) {  if (!root) {  return true;  }   if (root-&amp;gt;val &amp;lt;= low || root-&amp;gt;val &amp;gt;= high) {  return false;  }  return helper(root-&amp;gt;left, low, root-&amp;gt;val) &amp;amp;&amp;amp;  helper(root-&amp;gt;right, root-&amp;gt;val, high); }  bool is_bst(TreeNode *root) {  return helper(root, LONG_MIN, LONG_MAX); } 中序遍历  时间复杂度：\(O(n)\) 空间复杂度：\(O(n)\)  bool is_bst(TreeNode *root) {  std::stack&amp;lt;TreeNode *&amp;gt; s;  long long pre = LONG_MIN;  while (!</description>
    </item>
    
    <item>
      <title>概率论</title>
      <link>https://kaizhang91.github.io/note/LeetCode/%E6%A6%82%E7%8E%87%E8%AE%BA/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kaizhang91.github.io/note/LeetCode/%E6%A6%82%E7%8E%87%E8%AE%BA/</guid>
      <description>在 0 到 1 之间随机选择 3 个小数，他们的和小于 1 的概率是？[1]  图 1: x + y + z &amp;lt; 1 所占空间  如图. 1 所示，四面体所占体积为 \(\frac{1}{3}\times\frac{1}{2}\times 1\times 1\times 1 = \frac{1}{6}\)。
参考文献 [1] JIAN0929. 在 0 到 1 之间随机选择 3 个小数，他们的和小于 1 的概率是？[EB/OL](2018–08–25). https://www.nowcoder.com/questionTerminal/a68163ca4e824539b38c14ab357293b1.
  目录  在 0 到 1 之间随机选择 3 个小数，他们的和小于 1 的概率是？[1] 参考文献   </description>
    </item>
    
    <item>
      <title>链表</title>
      <link>https://kaizhang91.github.io/note/LeetCode/%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kaizhang91.github.io/note/LeetCode/%E9%93%BE%E8%A1%A8/</guid>
      <description>148 链表排序 给你链表的头结点 head，请将其按升序排列并返回排序后的链表。
自底向上归并排序  时间复杂度：\(O(n\log n)\) 空间复杂度：\(O(1)\)  ListNode *merge(ListNode *h1, ListNode *h2) {  ListNode *dummy_head = new ListNode(0);  ListNode *p = dummy_head;  while (h1 &amp;amp;&amp;amp; h2) {  if (h1-&amp;gt;val &amp;lt;= h2-&amp;gt;val) {  p-&amp;gt;next = h1;  h1 = h1-&amp;gt;next;  } else {  p-&amp;gt;next = h2;  h2 = h2-&amp;gt;next;  }  p = p-&amp;gt;next;  }  if (h1) {  p-&amp;gt;next = h1;  } else if (h2) {  p-&amp;gt;next = h2;  }  auto h = dummy_head-&amp;gt;next;  delete dummy_head;  return h; }  ListNode *sort_list(ListNode *head) {  int n = 0;  ListNode *p = head;  while (p) {  n++;  p = p-&amp;gt;next;  }  ListNode *dummy_head = new ListNode(0, head);  for (int sub_size = 1; sub_size &amp;lt; n; sub_size &amp;lt;&amp;lt;= 1) {  ListNode *p0 = dummy_head;  p = dummy_head-&amp;gt;next;  while (p) {  ListNode *h1 = p;  for (int i = 1; i &amp;lt; sub_size &amp;amp;&amp;amp; p-&amp;gt;next; i++) {  p = p-&amp;gt;next;  }  ListNode *h2 = p-&amp;gt;next;  p-&amp;gt;next = nullptr;  p = h2;  for (int i = 1; i &amp;lt; sub_size &amp;amp;&amp;amp; p-&amp;gt;next; i++) {  p = p-&amp;gt;next;  }  ListNode *p2 = nullptr;  if (p) {  p2 = p-&amp;gt;next;  p-&amp;gt;next = nullptr;  }  p0-&amp;gt;next = merge(h1, h2);  while (p0-&amp;gt;next) {  p0 = p0-&amp;gt;next;  }  p = p2;  }  }  head = dummy_head-&amp;gt;next;  delete dummy_head;  return head; } 206 反转链表 反转一个单链表。</description>
    </item>
    
  </channel>
</rss>
