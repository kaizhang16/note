<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LeetCode on 凯的笔记</title>
    <link>https://kaizhang91.github.io/note/LeetCode/</link>
    <description>Recent content in LeetCode on 凯的笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language><atom:link href="https://kaizhang91.github.io/note/LeetCode/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>动态规划</title>
      <link>https://kaizhang91.github.io/note/LeetCode/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kaizhang91.github.io/note/LeetCode/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</guid>
      <description>一维 123 买卖股票的最佳时机 III 给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。设计一个算法来计算你所能获取的最大利润。你最多可以完成两笔交易。注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
 时间复杂度：\(O(n)\) 空间复杂度：\(O(K)\)  int max_profit(vector&amp;lt;int&amp;gt; &amp;amp;prices) {  int K = 2;  // dp[j][0]: 卖出 j 次的最大利润  // dp[j][1]: 买入 j 次的最大利润  int dp[K + 1][2];  for (int j = 0; j &amp;lt;= K; j++) {  dp[j][0] = 0;  dp[j][1] = INT_MIN;  }  for (auto price : prices) {  for (int j = 1; j &amp;lt;= K; j++) {  dp[j][0] = std::max(dp[j][0], dp[j][1] + price);  dp[j][1] = std::max(dp[j][1], dp[j - 1][0] - price);  }  }  return dp[K][0]; } 二维 44 通配符匹配 给定一个字符串 (s) 和一个字符模式 (p) ，实现一个支持 ?</description>
    </item>
    
    <item>
      <title>字符串</title>
      <link>https://kaizhang91.github.io/note/LeetCode/%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kaizhang91.github.io/note/LeetCode/%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>647 回文子串 给定一个字符串，你的任务是计算这个字符串中有多少个回文子串。
具有不同开始位置或结束位置的子串，即使是由相同的字符组成，也会被视作不同的子串。
中心扩展  时间复杂度：\(O(n^2)\) 空间复杂度：\(O(1)\)  void helper(string s, int l, int r, int &amp;amp;result) {  while (l &amp;gt;= 0 &amp;amp;&amp;amp; r &amp;lt; s.size() &amp;amp;&amp;amp; s[l] == s[r]) {  result++;  l--;  r++;  } }  int count_substring(string s) {  int result = 0;  for (int i = 0; i &amp;lt; s.size(); i++) {  helper(s, i, i, result);  helper(s, i, i + 1, result);  }  return result; } 目录  647 回文子串  中心扩展    </description>
    </item>
    
    <item>
      <title>数字</title>
      <link>https://kaizhang91.github.io/note/LeetCode/%E6%95%B0%E5%AD%97/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kaizhang91.github.io/note/LeetCode/%E6%95%B0%E5%AD%97/</guid>
      <description>50 Pow(x, n) 实现 pow(x, n)，即计算 x 的 n 次幂函数。
快速幂 + 递归  时间复杂度：\(O(\log n)\) 空间复杂度：\(O(\log n)\)  double quick_pow(double x, long long N) {  if (N == 0) {  return 1.0;  } else {  double y = quick_pow(x, N / 2);  return N % 2 == 0 ? y * y : y * y * x;  } }  double my_pow(double x, int n) {  long long N = n;  return n &amp;gt;= 0 ?</description>
    </item>
    
    <item>
      <title>数组</title>
      <link>https://kaizhang91.github.io/note/LeetCode/%E6%95%B0%E7%BB%84/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kaizhang91.github.io/note/LeetCode/%E6%95%B0%E7%BB%84/</guid>
      <description>一维数组 未排序的数组 15 三数之和 给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有和为 0 且不重复的三元组。
 注意：答案中不可以包含重复的三元组。
  时间复杂度：\(O(n^2)\) 空间复杂度：\(O(\log n)\)  vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; three_sum(vector&amp;lt;int&amp;gt; &amp;amp;nums) {  std::sort(nums.begin(), nums.end());  vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; result;  int n = nums.size();  for (int i = 0; i &amp;lt; n; i++) {  if (i &amp;gt; 0 &amp;amp;&amp;amp; nums[i] == nums[i - 1]) {  continue;  }  int k = n - 1;  for (int j = i + 1; j &amp;lt; k; j++) {  if (j &amp;gt; i + 1 &amp;amp;&amp;amp; nums[j] == nums[j - 1]) {  continue;  }  while (k &amp;gt; j &amp;amp;&amp;amp; nums[k] + nums[j] &amp;gt; -nums[i]) {  k--;  }  if (k == j) {  break;  }  if (nums[j] + nums[k] == -nums[i]) {  result.</description>
    </item>
    
    <item>
      <title>树</title>
      <link>https://kaizhang91.github.io/note/LeetCode/%E6%A0%91/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kaizhang91.github.io/note/LeetCode/%E6%A0%91/</guid>
      <description>二叉树 94 二叉树的中序遍历 给定一个二叉树的根节点 root ，返回它的 中序 遍历。
递归  时间复杂度：\(O(n)\) 空间复杂度：\(O(n)\)  void helper(TreeNode *root, vector&amp;lt;int&amp;gt; &amp;amp;result) {  if (!root) {  return;  }  helper(root-&amp;gt;left, result);  result.push_back(root-&amp;gt;val);  helper(root-&amp;gt;right, result); }  vector&amp;lt;int&amp;gt; in_order(TreeNode *root) {  vector&amp;lt;int&amp;gt; result;  helper(root, result);  return result; } 迭代  时间复杂度：\(O(n)\) 空间复杂度：\(O(n)\)  vector&amp;lt;int&amp;gt; in_order(TreeNode *root) {  std::stack&amp;lt;TreeNode *&amp;gt; s;  vector&amp;lt;int&amp;gt; result;  while (root || !</description>
    </item>
    
    <item>
      <title>概率论</title>
      <link>https://kaizhang91.github.io/note/LeetCode/%E6%A6%82%E7%8E%87%E8%AE%BA/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kaizhang91.github.io/note/LeetCode/%E6%A6%82%E7%8E%87%E8%AE%BA/</guid>
      <description>在 0 到 1 之间随机选择 3 个小数，他们的和小于 1 的概率是？[1]  图 1: x + y + z &amp;lt; 1 所占空间  如图. 1 所示，四面体所占体积为 \(\frac{1}{3}\times\frac{1}{2}\times 1\times 1\times 1 = \frac{1}{6}\)。
参考文献 [1] JIAN0929. 在 0 到 1 之间随机选择 3 个小数，他们的和小于 1 的概率是？[EB/OL](2018–08–25). https://www.nowcoder.com/questionTerminal/a68163ca4e824539b38c14ab357293b1.
  目录  在 0 到 1 之间随机选择 3 个小数，他们的和小于 1 的概率是？[1] 参考文献   </description>
    </item>
    
    <item>
      <title>链表</title>
      <link>https://kaizhang91.github.io/note/LeetCode/%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kaizhang91.github.io/note/LeetCode/%E9%93%BE%E8%A1%A8/</guid>
      <description>19 删除链表的倒数第 N 个结点 给你一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。
进阶：你能尝试使用一趟扫描实现吗？
ListNode *rm_nth_from_end(ListNode *head, int n) {  auto dummy = new ListNode(0, head);  auto p0 = dummy;  auto p1 = head;  for (int i = 0; i &amp;lt; n; i++) {  p1 = p1-&amp;gt;next;  }  while (p1) {  p0 = p0-&amp;gt;next;  p1 = p1-&amp;gt;next;  }  auto next = p0-&amp;gt;next;  p0-&amp;gt;next = next-&amp;gt;next;  delete next;  head = dummy-&amp;gt;next;  delete dummy;  return head; } 21 合并两个有序链表 将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。</description>
    </item>
    
  </channel>
</rss>
