---
title: "算法"
---

# 数据结构的存储方式

| 存储方式 | 特点     | 优点                          | 缺点                          |
|----------|----------|-------------------------------|-------------------------------|
| 数组     | 顺序存储 | - 支持随机访问                | - 扩容时间复杂度 `O(N)`       |
|          |          | - 节约存储空间                | - 插入和删除时间复杂度 `O(N)` |
| 链表     | 链式存储 | - 扩容时间复杂度 `O(1)`       | - 不支持随机访问              |
|          |          | - 插入和删除时间复杂度 `O(1)` | - 需要存储指针                |

: 数据结构的存储方式 {#tbl:data_structure_store}

# 数据结构的基本操作

任何数据结构的基本操作都是增删查改。不同数据结构的目的是在不同的应用场景，尽可能
高效地增删查改。

## 遍历数组

```c++
void traverse(int[] arr) {
    for (int i = 0; i < arr.length; i++) {
        // 迭代访问 arr[i]
    }
}
```

## 遍历链表

```c++
class ListNode {
    int val;
    ListNode next;
}

void traverse(ListNode head) {
    for (ListNode p = head; p != null; p = p.next) {
        // 迭代访问 p.val
    }
}

void traverse(ListNode head) {
    // 递归访问 head.val
    traverse(head.next)
}
```

### 遍历二叉树

```c++
class TreeNode {
    int val;
    TreeNode left, right;
}

void traverse(TreeNode root) {
    // 前序遍历
    traverse(root.left)
    // 中序遍历
    traverse(root.right)
    // 后序遍历
}
```

### 遍历 N 叉树

```c++
class TreeNode {
    int val;
    TreeNode[] children;
}

void traverse(TreeNode root) {
    for (TreeNode child : root.children) {
        traverse(child);
    }
}
```

### 遍历图

用 `visited` 数组做标记。

# 动态规划

```c++
# 初始化 base case
dp[0][0][...] = base
# 进行状态转移
for 状态1 in 状态1的所有取值:
    for 状态2 in 状态2的所有取值:
        for ...
            dp[状态1][状态2][...] = 求最值(选择1, 选择2...)
```

# 回溯法

```py
result = []
def backtrack(路径, 选择列表):
    if 满足结束条件:
        result.add(路径)
        return

    for 选择 in 选择列表:
        做选择
        backtrack(路径, 选择列表)
        撤销选择
```
