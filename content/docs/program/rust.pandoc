---
title: "Rust"
---

# Cargo

## 新建项目

```sh
cargo new ${name}
```

> 默认使用 `--bin` 参数。

# 语法

## 命名惯例[@rust_name_convention]

| 项目               | 惯例                             |
|--------------------|----------------------------------|
| Crates             | `snake_case`, prefer single word |
| Modules            | `snake_case`                     |
| Types              | `CamelCase`                      |
| Traits             | `CamelCase`                      |
| Functions          | `snake_case`                     |
| Methods            | `snake_case`                     |
| 一般的构造函数     | `new` 或者 `with_more_details`   |
| 转换构造函数       | `from_some_other_type`           |
| Local variables    | `snake_case`                     |
| Static variables   | `SCREAMING_SNAKE_CASE`           |
| Constant variables | `SCREAMING_SNAKE_CASE`           |
| Type parameters    | 简洁的 `CamelCase`，比如 `T`     |
| Lifetimes          | 简短的小写字母，比如 `'a`        |

: Rust 命名惯例 {#tbl:rust_name_convention}

> - 首字母缩写词写成 Uuid，而不是 UUID

## module[@rust_module]

- 如果模块 `foo` 没有子模块，则代码放在 `foo.rs`
- 如果模块 `foo` 有子模块，则代码放在 `foo/mod.rs`

## 类型

| 语法   | 含义  |
|--------|-------|
| `&[T]` | slice |

: Rust 类型 {#tbl:rust_type}

## 类型转换

| 类型                 | 转换方法 |
|----------------------|----------|
| `Option` -> `Result` | `ok_or`  |

: Rust 类型转换 {#tbl:rust_type_convert}

## String

### 多行 String[@rust_string_multiple_line]

```rust
let string = "line one
line two";
```

## Iterator

| 方法         | 作用       |
|--------------|------------|
| `filter_map` | 过滤并映射 |

: Iterator 方法列表 {#tbl:iterator_methods}

## Vec

| 方法     | 含义         |
|----------|--------------|
| `remove` | 移除某个元素 |

: Vec 常用方法 {#tbl:vec_methods}

### 合并[@rust_vector_concat]

```rust
let mut a = vec![1, 2, 3];
let b = vec![4, 5, 6];

a.extend(b);
assert_eq!(a, [1, 2, 3, 4, 5, 6]);
// b is moved and can't be used anymore
```

## 静态 slice[@rust_static_slice]

```rust
static NUMBERS: &'static [i32] = &[1, 2, 3, 4, 5];
```

## Enum[@rust_enum]

```rust
enum IpAddrKind {
    V4,
    V6,
}
```

## fmt::Display[@rust_fmt_display]

```rust
impl fmt::Display for Foo {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{:?}", self)
        // or, alternatively:
        // fmt::Debug::fmt(self, f)
    }
}
```

## macro

| macro                      | 含义                 |
|----------------------------|----------------------|
| `#[allow(non_snake_case)]` | 关闭 snake_case 警告 |

: Rust 宏 {#tbl:rust_macro}

# diesel

## 安装

```sh
cargo install diesel_cli
```

## 用法

| 方法         | 含义                    |
|--------------|-------------------------|
| `load`       | `SELECT` 后返回多条记录 |
| `into_boxed` | 用于改变 query          |
| `ge`         | `>=`                    |

: diesel 常用方法 {#tbl:diesel_methods}

# 参考文献
