---
title: "数组"
---

# 一维数组

## 未排序的数组

### 169 众数

#### 哈希表

- 时间复杂度：$O(n)$
- 空间复杂度：$O(n)$

```c++
int major_element_v1(vector<int> &nums) {
    std::unordered_map<int, int> m;
    int n = nums.size();
    for (auto num : nums) {
        if (++m[num] > (n / 2)) {
            return num;
        }
    }
    return -1;
}
```

#### Boyer-Moore 投票法

- 时间复杂度：$O(n)$
- 空间复杂度：$O(1)$

```c++
int major_element(vector<int> &nums) {
    int result = nums[0];
    int count = 1;
    for (int i = 1; i < nums.size(); ++i) {
        if (nums[i] == result) {
            count++;
        } else {
            if (count > 0) {
                count--;
            } else {
                result = nums[i];
                count = 1;
            }
        }
    }
    return result;
}
```

### 189 旋转数组

#### 使用额外数组

- 时间复杂度：$O(n)$
- 空间复杂度：$O(n)$

```c++
void rotate_v1(vector<int> &nums, int k) {
    int n = nums.size();
    vector<int> tmp(n);
    for (int i = 0; i < n; i++) {
        tmp[(i + k) % n] = nums[i];
    }
    nums.assign(tmp.begin(), tmp.end());
}
```

#### 翻转

- 时间复杂度：$O(n)$
- 空间复杂度：$O(1)$

```c++
void reverse(vector<int> &nums, int i0, int i1) {
    while (i0 < i1) {
        std::swap(nums[i0], nums[i1 - 1]);
        i0++;
        i1--;
    }
}

void rotate_v2(vector<int> &nums, int k) {
    int n = nums.size();
    k = k % n;
    reverse(nums, 0, n);
    reverse(nums, 0, k);
    reverse(nums, k, n);
}
```

#### 环状替换

- 时间复杂度：$O(n)$
- 空间复杂度：$O(1)$

```c++
void rotate(vector<int> &nums, int k) {
    int n = nums.size();
    int count = std::__gcd(n, k);
    for (int start = 0; start < count; start++) {
        int i = start;
        int pre = nums[i];
        do {
            int i_next = (i + k) % n;
            std::swap(nums[i_next], pre);
            i = i_next;
        } while (i != start);
    }
}
```

### 41 缺失的第一个正数

#### 哈希表

- 时间复杂度：$O(n)$
- 时间复杂度：$O(1)$

```c++
int first_missing_positive(vector<int> &nums) {
    int n = nums.size();
    for (auto &num : nums) {
        if (num <= 0) {
            num = n + 1;
        }
    }
    for (int i = 0; i < n; i++) {
        int index = abs(nums[i]) - 1;
        if (index < n && nums[index] > 0) {
            nums[index] *= -1;
        }
    }
    for (int i = 0; i < n; i++) {
        if (nums[i] > 0) {
            return i + 1;
        }
    }
    return n + 1;
}
```

#### 置换

- 时间复杂度：$O(n)$
- 时间复杂度：$O(1)$

```c++
int first_missing_positive_v2(vector<int> &nums) {
    int n = nums.size();
    for (int i = 0; i < n; i++) {
        while (nums[i] > 0 && nums[i] <= n && nums[nums[i] - 1] != nums[i]) {
            std::swap(nums[i], nums[nums[i] - 1]);
        }
    }
    for (int i = 0; i < n; i++) {
        if (nums[i] != i + 1) {
            return i + 1;
        }
    }
    return n + 1;
}
```

# 二维数组

## 数独

### 36 数独是否有效

- 时间复杂度：$O(1)
- 空间复杂度：$O(1)

```c++
bool is_valid_sudoku(vector<vector<char>> &board) {
    int n = board.size();
    std::unordered_map<char, int> row;
    vector<std::unordered_map<char, int>> column(n);
    vector<std::unordered_map<char, int>> box(n);
    for (int i = 0; i < n; i++) {
        row.clear();
        for (int j = 0; j < n; j++) {
            if (board[i][j] != '.') {
                row[board[i][j]]++;
                if (row[board[i][j]] > 1) {
                    return false;
                }
                column[j][board[i][j]]++;
                if (column[j][board[i][j]] > 1) {
                    return false;
                }
                box[(i / 3) * 3 + j / 3][board[i][j]]++;
                if (box[(i / 3) * 3 + j / 3][board[i][j]] > 1) {
                    return false;
                }
            }
        }
    }
    return true;
}
```

# 图

## 连通性

### 547 find_circle_num

#### DFS

- 时间复杂度：$O(n^2)$
- 空间复杂度：$O(n)$

```c++
void dfs(vector<vector<int>> &isConnected, vector<bool> &visited, int i) {
    for (int j = 0; j < isConnected.size(); j++) {
        if (!visited[j] && isConnected[i][j] == 1) {
            visited[j] = true;
            dfs(isConnected, visited, j);
        }
    }
}

int find_circle_num(vector<vector<int>> &isConnected) {
    int n = isConnected.size();
    if (n == 0) {
        return 0;
    }

    vector<bool> visited(n, false);
    int result = 0;
    for (int i = 0; i < n; i++) {
        if (!visited[i]) {
            result++;
            dfs(isConnected, visited, i);
        }
    }
    return result;
}
```

#### BFS

- 时间复杂度：$O(n^2)$
- 空间复杂度：$O(n)$

```c++
int find_circle_num_v2(vector<vector<int>> &isConnected) {
    int n = isConnected.size();
    if (n == 0) {
        return 0;
    }

    vector<bool> visited(n, false);
    std::queue<int> q;
    int result = 0;
    for (int i = 0; i < n; i++) {
        if (!visited[i]) {
            result++;
            q.push(i);
            while (!q.empty()) {
                auto front = q.front();
                q.pop();
                visited[front] = true;
                for (int j = 0; j < n; j++) {
                    if (!visited[j] && isConnected[front][j] == 1) {
                        q.push(j);
                    }
                }
            }
        }
    }
    return result;
}
```

#### 并查集

- 时间复杂度：$O(n^2\log n)$
- 空间复杂度：$O(n)$

```c++
int find_root(vector<int> &root, int i) {
    if (root[i] != i) {
        root[i] = find_root(root, root[i]);
    }
    return root[i];
}

void union_tree(vector<int> &root, int i, int j) {
    root[find_root(root, i)] = find_root(root, j);
}

int find_circle_num_v3(vector<vector<int>> &isConnected) {
    int n = isConnected.size();
    vector<int> root(n);
    for (int i = 0; i < n; i++) {
        root[i] = i;
    }
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            if (isConnected[i][j] == 1) {
                union_tree(root, i, j);
            }
        }
    }
    int result = 0;
    for (int i = 0; i < n; i++) {
        if (root[i] == i) {
            result++;
        }
    }
    return result;
}
```
