---
title: "数组"
---

# 一维数组

## 未排序的数组

### 15 三数之和

给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得
a + b + c = 0 ？请你找出所有和为 0 且不重复的三元组。

> 注意：答案中不可以包含重复的三元组。

- 时间复杂度：$O(n^2)$
- 空间复杂度：$O(\log n)$

```c++
vector<vector<int>> three_sum(vector<int> &nums) {
    std::sort(nums.begin(), nums.end());
    vector<vector<int>> result;
    int n = nums.size();
    for (int i = 0; i < n; i++) {
        if (i > 0 && nums[i] == nums[i - 1]) {
            continue;
        }
        int k = n - 1;
        for (int j = i + 1; j < k; j++) {
            if (j > i + 1 && nums[j] == nums[j - 1]) {
                continue;
            }
            while (k > j && nums[k] + nums[j] > -nums[i]) {
                k--;
            }
            if (k == j) {
                break;
            }
            if (nums[j] + nums[k] == -nums[i]) {
                result.push_back(vector<int>{nums[i], nums[j], nums[k]});
            }
        }
    }
    return result;
}
```

### 41 缺失的第一个正数

给你一个未排序的整数数组 nums，请你找出其中没有出现的最小的正整数。

#### 哈希表

- 时间复杂度：$O(n)$
- 空间复杂度：$O(1)$

```c++
int first_missing_positive(vector<int> &nums) {
    int n = nums.size();
    for (auto &num : nums) {
        if (num <= 0) {
            num = n + 1;
        }
    }
    for (int i = 0; i < n; i++) {
        int index = abs(nums[i]) - 1;
        if (index < n && nums[index] > 0) {
            nums[index] *= -1;
        }
    }
    for (int i = 0; i < n; i++) {
        if (nums[i] > 0) {
            return i + 1;
        }
    }
    return n + 1;
}
```

#### 置换

- 时间复杂度：$O(n)$
- 空间复杂度：$O(1)$

```c++
int first_missing_positive_v2(vector<int> &nums) {
    int n = nums.size();
    for (int i = 0; i < n; i++) {
        while (nums[i] > 0 && nums[i] <= n && nums[nums[i] - 1] != nums[i]) {
            std::swap(nums[i], nums[nums[i] - 1]);
        }
    }
    for (int i = 0; i < n; i++) {
        if (nums[i] != i + 1) {
            return i + 1;
        }
    }
    return n + 1;
}
```

### 162 寻找峰值

峰值元素是指其值大于左右相邻值的元素。

给你一个输入数组 nums，找到峰值元素并返回其索引。数组可能包含多个峰值，在这种情况下，返回 任何一个峰值 所在位置即可。

你可以假设 nums[-1] = nums[n] = -∞ 。

#### 二分查找

- 时间复杂度：$O(\log n)$
- 空间复杂度：$O(1)$

```c++
int find_peak(vector<int> &nums) {
    int l = 0, r = nums.size();
    while (r - l > 1) {
        int m = l + (r - l - 1) / 2;
        if (nums[m] < nums[m + 1]) {
            l = m + 1;
        } else {
            r = m + 1;
        }
    }
    return l;
}
```

### 169 众数

给定一个大小为 n 的数组，找到其中的多数元素。多数元素是指在数组中出现次数大于
⌊ n/2 ⌋ 的元素。你可以假设数组是非空的，并且给定的数组总是存在多数元素。

#### 哈希表

- 时间复杂度：$O(n)$
- 空间复杂度：$O(n)$

```c++
int major_element_v1(vector<int> &nums) {
    std::unordered_map<int, int> m;
    int n = nums.size();
    for (auto num : nums) {
        if (++m[num] > (n / 2)) {
            return num;
        }
    }
    return -1;
}
```

#### Boyer-Moore 投票法

- 时间复杂度：$O(n)$
- 空间复杂度：$O(1)$

```c++
int major_element(vector<int> &nums) {
    int result = nums[0];
    int count = 1;
    for (int i = 1; i < nums.size(); ++i) {
        if (nums[i] == result) {
            count++;
        } else {
            if (count > 0) {
                count--;
            } else {
                result = nums[i];
                count = 1;
            }
        }
    }
    return result;
}
```

### 189 旋转数组

给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。

#### 使用额外数组

- 时间复杂度：$O(n)$
- 空间复杂度：$O(n)$

```c++
void rotate_v1(vector<int> &nums, int k) {
    int n = nums.size();
    vector<int> tmp(n);
    for (int i = 0; i < n; i++) {
        tmp[(i + k) % n] = nums[i];
    }
    nums.assign(tmp.begin(), tmp.end());
}
```

#### 翻转

- 时间复杂度：$O(n)$
- 空间复杂度：$O(1)$

```c++
void reverse(vector<int> &nums, int i0, int i1) {
    while (i0 < i1) {
        std::swap(nums[i0], nums[i1 - 1]);
        i0++;
        i1--;
    }
}

void rotate_v2(vector<int> &nums, int k) {
    int n = nums.size();
    k = k % n;
    reverse(nums, 0, n);
    reverse(nums, 0, k);
    reverse(nums, k, n);
}
```

#### 环状替换

- 时间复杂度：$O(n)$
- 空间复杂度：$O(1)$

```c++
void rotate(vector<int> &nums, int k) {
    int n = nums.size();
    int count = std::__gcd(n, k);
    for (int start = 0; start < count; start++) {
        int i = start;
        int pre = nums[i];
        do {
            int i_next = (i + k) % n;
            std::swap(nums[i_next], pre);
            i = i_next;
        } while (i != start);
    }
}
```

## 排序的数组

### 4 寻找两个正序数组的中位数

```c++
double find_median(vector<int> &nums1, vector<int> &nums2) {
    int m = nums1.size(), n = nums2.size();
    if (m > n) {
        return find_median(nums2, nums1);
    }
    int l = 0, r = m;
    int median1 = 0, median2 = 0;
    while (r - l >= 0) {
        int i = l + (r - l) / 2;
        int j = (m + n + 1) / 2 - i;
        nums1_i0 = (i == 0 ? INT_MIN : nums1[i - 1]);
        nums1_i = (i == m ? INT_MAX : nums1[i]);
        nums2_j0 = (j == 0 ? INT_MIN : nums2[j - 1]);
        nums2_j = (j == n ? INT_MAX : nums2[j]);
        if (nums1_i0 <= nums2_j) {
            median1 = std::max(nums1_i0, nums2_j0);
            median2 = std::min(nums1_i, nums2_j);
            l = i + 1;
        } else {
            r = i - 1;
        }
    }
    return (m + n) % 2 == 0 ? (median1 + median2) / 2.0 : median1;
}
```

### 33 搜索旋转排序数组

整数数组 nums 按升序排列，数组中的值 互不相同 。

在传递给函数之前，nums 在预先未知的某个下标 k（0 <= k < nums.length）上进行了 旋
转，使数组变为 [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ...,
nums[k-1]]（下标 从 0 开始 计数）。例如， [0,1,2,4,5,6,7] 在下标 3 处经旋转后可
能变为 [4,5,6,7,0,1,2] 。

给你 旋转后 的数组 nums 和一个整数 target ，如果 nums 中存在这个目标值 target ，
则返回它的索引，否则返回 -1 。

#### 二分查找

- 时间复杂度：$O(\log n)$
- 空间复杂度：$O(1)$

```c++
int search(vector<int> &nums, int target) {
    int l = 0, r = nums.size();
    if (r == 1) {
        return nums[0] == target ? 0 : -1;
    }
    while (r - l > 0) {
        int m = l + (r - l - 1) / 2;
        if (nums[m] == target) {
            return m;
        } else if (nums[l] < nums[m]) {
            if (target >= nums[l] && target < nums[m]) {
                r = m;
            } else {
                l = m + 1;
            }
        } else {
            if (target >= nums[m + 1] && target <= nums[r - 1]) {
                l = m + 1;
            } else {
                r = m;
            }
        }
    }
    return -1;
}
```

### 88 合并两个有序数组

给你两个有序整数数组 nums1 和 nums2，请你将 nums2 合并到 nums1 中，使 nums1 成为
一个有序数组。初始化 nums1 和 nums2 的元素数量分别为 m 和 n 。你可以假设 nums1
的空间大小等于 m + n，这样它就有足够的空间保存来自 nums2 的元素。

从末尾开始遍历。

- 时间复杂度：$O(m+n)$
- 空间复杂度：$O(1)$

```c++
void merge(vector<int> &nums1, int m, vector<int> &nums2, int n) {
    int i1 = m - 1, i2 = n - 1, i = m + n - 1;
    while (i1 >= 0 && i2 >= 0) {
        nums1[i--] = nums1[i1] < nums2[i2] ? nums2[i2--] : nums1[i1--];
    }
    while (i2 >= 0) {
        nums1[i--] = nums2[i2--];
    }
}
```

### 852 山脉数组的峰顶索引

符合下列属性的数组 arr 称为 山脉数组 ：

- arr.length >= 3
- 存在 i（0 < i < arr.length - 1）使得：
    - arr[0] < arr[1] < ... arr[i-1] < arr[i]
    - arr[i] > arr[i+1] > ... > arr[arr.length - 1]

给你由整数组成的山脉数组 arr ，返回任何满足 arr[0] < arr[1] < ... arr[i - 1] <
arr[i] > arr[i + 1] > ... > arr[arr.length - 1] 的下标 i 。

#### 二分查找

- 时间复杂度：$O(\log n)$
- 空间复杂度：$O(1)$

```c++
int peak(vector<int> &arr) {
    int l = 0, r = arr.size();
    while (r - l > 1) {
        int m = l + (r - l - 1) / 2;
        if (arr[m] < arr[m + 1]) {
            l = m + 1;
        } else {
            r = m + 1;
        }
    }
    return l;
}
```

# 二维数组

## 数独

### 36 数独是否有效

判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。

- 1-9 在每一行只能出现一次。
- 1-9 在每一列只能出现一次。
- 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。

- 时间复杂度：$O(1)
- 空间复杂度：$O(1)

```c++
bool is_valid_sudoku(vector<vector<char>> &board) {
    int n = board.size();
    std::unordered_map<char, int> row;
    vector<std::unordered_map<char, int>> column(n);
    vector<std::unordered_map<char, int>> box(n);
    for (int i = 0; i < n; i++) {
        row.clear();
        for (int j = 0; j < n; j++) {
            if (board[i][j] != '.') {
                row[board[i][j]]++;
                if (row[board[i][j]] > 1) {
                    return false;
                }
                column[j][board[i][j]]++;
                if (column[j][board[i][j]] > 1) {
                    return false;
                }
                box[(i / 3) * 3 + j / 3][board[i][j]]++;
                if (box[(i / 3) * 3 + j / 3][board[i][j]] > 1) {
                    return false;
                }
            }
        }
    }
    return true;
}
```

## 48. 旋转图像

给定一个 n × n 的二维矩阵 matrix 表示一个图像。请你将图像顺时针旋转 90 度。你必
须在原地旋转图像，这意味着你需要直接修改输入的二维矩阵。请不要使用另一个矩阵来旋
转图像。

- 时间复杂度：$O(n^2)$
- 空间复杂度：$O(1)$

```c++
void rotate(vector<vector<int>> &matrix) {
    int n = matrix.size();
    for (int i = 0; i < n / 2; i++) {
        for (int j = i; j < n - 1 - i; j++) {
            int tmp = matrix[i][j];
            matrix[i][j] = matrix[n - 1 - j][i];
            matrix[n - 1 - j][i] = matrix[n - 1 - i][n - 1 - j];
            matrix[n - 1 - i][n - 1 - j] = matrix[j][n - 1 - i];
            matrix[j][n - 1 - i] = tmp;
        }
    }
}
```

# 图

## 连通性

### 547 省份数量

有 n 个城市，其中一些彼此相连，另一些没有相连。如果城市 a 与城市 b 直接相连，且
城市 b 与城市 c 直接相连，那么城市 a 与城市 c 间接相连。省份是一组直接或间接相连
的城市，组内不含其他没有相连的城市。给你一个 n x n 的矩阵 isConnected ，其中
isConnected[i][j] = 1 表示第 i 个城市和第 j 个城市直接相连，而 isConnected[i][j]
= 0 表示二者不直接相连。返回矩阵中省份的数量。

#### DFS

- 时间复杂度：$O(n^2)$
- 空间复杂度：$O(n)$

```c++
void dfs(vector<vector<int>> &isConnected, vector<bool> &visited, int i) {
    for (int j = 0; j < isConnected.size(); j++) {
        if (!visited[j] && isConnected[i][j] == 1) {
            visited[j] = true;
            dfs(isConnected, visited, j);
        }
    }
}

int find_circle_num(vector<vector<int>> &isConnected) {
    int n = isConnected.size();
    if (n == 0) {
        return 0;
    }

    vector<bool> visited(n, false);
    int result = 0;
    for (int i = 0; i < n; i++) {
        if (!visited[i]) {
            result++;
            dfs(isConnected, visited, i);
        }
    }
    return result;
}
```

#### BFS

- 时间复杂度：$O(n^2)$
- 空间复杂度：$O(n)$

```c++
int find_circle_num_v2(vector<vector<int>> &isConnected) {
    int n = isConnected.size();
    if (n == 0) {
        return 0;
    }

    vector<bool> visited(n, false);
    std::queue<int> q;
    int result = 0;
    for (int i = 0; i < n; i++) {
        if (!visited[i]) {
            result++;
            q.push(i);
            while (!q.empty()) {
                auto front = q.front();
                q.pop();
                visited[front] = true;
                for (int j = 0; j < n; j++) {
                    if (!visited[j] && isConnected[front][j] == 1) {
                        q.push(j);
                    }
                }
            }
        }
    }
    return result;
}
```

#### 并查集

- 时间复杂度：$O(n^2\log n)$
- 空间复杂度：$O(n)$

```c++
int find_root(vector<int> &root, int i) {
    if (root[i] != i) {
        root[i] = find_root(root, root[i]);
    }
    return root[i];
}

void union_tree(vector<int> &root, int i, int j) {
    root[find_root(root, i)] = find_root(root, j);
}

int find_circle_num_v3(vector<vector<int>> &isConnected) {
    int n = isConnected.size();
    vector<int> root(n);
    for (int i = 0; i < n; i++) {
        root[i] = i;
    }
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            if (isConnected[i][j] == 1) {
                union_tree(root, i, j);
            }
        }
    }
    int result = 0;
    for (int i = 0; i < n; i++) {
        if (root[i] == i) {
            result++;
        }
    }
    return result;
}
```

### 684 冗余连接

在本问题中, 树指的是一个连通且无环的无向图。输入一个图，该图由一个有着N个节点(节
点值不重复1, 2, ..., N) 的树及一条附加的边构成。附加的边的两个顶点包含在1到N中
间，这条附加的边不属于树中已存在的边。结果图是一个以边组成的二维数组。每一个边的
元素是一对[u, v] ，满足 u < v，表示连接顶点 u 和 v 的无向图的边。返回一条可以删
去的边，使得结果图是一个有着N个节点的树。如果有多个答案，则返回二维数组中最后出
现的边。答案边 [u, v] 应满足相同的格式 u < v。

并查集。

- 时间复杂度
    - 最坏情况：$O(N\log N)$
    - 平均情况：$O(N\alpha (N))$
- 空间复杂度：$O(N)$

```c++
int find_root(vector<int> &root, int node) {
    if (root[node] != node) {
        root[node] = find_root(root, root[node]);
    }
    return root[node];
}

void union_tree(vector<int> &root, int i, int j) {
    root[find_root(root, j)] = find_root(root, i);
}

vector<int> find_redundant_connection(vector<vector<int>> &edges) {
    int n = edges.size();
    vector<int> root(n);
    for (int i = 0; i < n; i++) {
        root[i] = i;
    }
    vector<int> result;
    for (auto edge : edges) {
        if (find_root(root, edge[0] - 1) != find_root(root, edge[1] - 1)) {
            union_tree(root, edge[0] - 1, edge[1] - 1);
        } else {
            result = edge;
        }
    }
    return result;
}
```
