---
title: "链表"
---

# 19 删除链表的倒数第 N 个结点

给你一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。

进阶：你能尝试使用一趟扫描实现吗？

```c++
ListNode *rm_nth_from_end(ListNode *head, int n) {
    auto dummy = new ListNode(0, head);
    auto p0 = dummy;
    auto p1 = head;
    for (int i = 0; i < n; i++) {
        p1 = p1->next;
    }
    while (p1) {
        p0 = p0->next;
        p1 = p1->next;
    }
    auto next = p0->next;
    p0->next = next->next;
    delete next;
    head = dummy->next;
    delete dummy;
    return head;
}
```

# 21 合并两个有序链表

将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所
有节点组成的。

```c++
ListNode *merge_list(ListNode *l1, ListNode *l2) {
    auto dummy = new ListNode(0);
    auto p = dummy;
    while (l1 && l2) {
        if (l1->val <= l2->val) {
            p->next = l1;
            l1 = l1->next;
        } else {
            p->next = l2;
            l2 = l2->next;
        }
        p = p->next;
    }
    p->next = l1 ? l1 : l2;
    auto head = dummy->next;
    delete dummy;
    return head;
}
```

# 24 两两交换链表中的节点

给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。

你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。

```c++
ListNode *swap_pair(ListNode *head) {
    auto dummy = new ListNode(0, head);
    auto p = dummy;
    while (p->next && p->next->next) {
        auto p1 = p->next;
        p->next = p1->next;
        p1->next = p->next->next;
        p->next->next = p1;
        p = p1;
    }
    head = dummy->next;
    delete dummy;
    return head;
}
```

# 148 链表排序

给你链表的头结点 head，请将其按升序排列并返回排序后的链表。

## 自底向上归并排序

- 时间复杂度：$O(n\log n)$
- 空间复杂度：$O(1)$

```c++
ListNode *merge(ListNode *h1, ListNode *h2) {
    ListNode *dummy_head = new ListNode(0);
    ListNode *p = dummy_head;
    while (h1 && h2) {
        if (h1->val <= h2->val) {
            p->next = h1;
            h1 = h1->next;
        } else {
            p->next = h2;
            h2 = h2->next;
        }
        p = p->next;
    }
    if (h1) {
        p->next = h1;
    } else if (h2) {
        p->next = h2;
    }
    auto h = dummy_head->next;
    delete dummy_head;
    return h;
}

ListNode *sort_list(ListNode *head) {
    int n = 0;
    ListNode *p = head;
    while (p) {
        n++;
        p = p->next;
    }
    ListNode *dummy_head = new ListNode(0, head);
    for (int sub_size = 1; sub_size < n; sub_size <<= 1) {
        ListNode *p0 = dummy_head;
        p = dummy_head->next;
        while (p) {
            ListNode *h1 = p;
            for (int i = 1; i < sub_size && p->next; i++) {
                p = p->next;
            }
            ListNode *h2 = p->next;
            p->next = nullptr;
            p = h2;
            for (int i = 1; i < sub_size && p->next; i++) {
                p = p->next;
            }
            ListNode *p2 = nullptr;
            if (p) {
                p2 = p->next;
                p->next = nullptr;
            }
            p0->next = merge(h1, h2);
            while (p0->next) {
                p0 = p0->next;
            }
            p = p2;
        }
    }
    head = dummy_head->next;
    delete dummy_head;
    return head;
}
```

# 206 反转链表

反转一个单链表。

示例:

输入: 1->2->3->4->5->NULL

输出: 5->4->3->2->1->NULL

- 时间复杂度：$O(n)$
- 空间复杂度：$O(1)$

```c++
ListNode *reverse_list(ListNode *head) {
    ListNode *p0 = nullptr;
    ListNode *p1 = head;
    while (p1) {
        ListNode *p2 = p1->next;
        p1->next = p0;
        p0 = p1;
        p1 = p2;
    }
    return p0;
}
```
