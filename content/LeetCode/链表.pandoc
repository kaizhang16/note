---
title: "链表"
---

# 19 删除链表的倒数第 N 个结点

给你一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。

进阶：你能尝试使用一趟扫描实现吗？

```c++
ListNode *rm_nth_from_end(ListNode *head, int n) {
    auto dummy = new ListNode(0, head);
    auto p0 = dummy;
    auto p1 = head;
    for (int i = 0; i < n; i++) {
        p1 = p1->next;
    }
    while (p1) {
        p0 = p0->next;
        p1 = p1->next;
    }
    auto next = p0->next;
    p0->next = next->next;
    delete next;
    head = dummy->next;
    delete dummy;
    return head;
}
```

# 21 合并两个有序链表

将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所
有节点组成的。

```c++
ListNode *merge_list(ListNode *l1, ListNode *l2) {
    auto dummy = new ListNode(0);
    auto p = dummy;
    while (l1 && l2) {
        if (l1->val <= l2->val) {
            p->next = l1;
            l1 = l1->next;
        } else {
            p->next = l2;
            l2 = l2->next;
        }
        p = p->next;
    }
    p->next = l1 ? l1 : l2;
    auto head = dummy->next;
    delete dummy;
    return head;
}
```

# 23 合并 K 个升序链表

给你一个链表数组，每个链表都已经按升序排列。

请你将所有链表合并到一个升序链表中，返回合并后的链表。

## 分治合并

- 时间复杂度：$O(kn\times \log k)$
- 空间复杂度：$O(\log k)$

```c++
ListNode *merge2list(ListNode *l1, ListNode *l2) {
    auto dummy = new ListNode(0);
    auto l = dummy;
    while (l1 && l2) {
        if (l1->val <= l2->val) {
            l->next = l1;
            l1 = l1->next;
        } else {
            l->next = l2;
            l2 = l2->next;
        }
        l = l->next;
    }
    l->next = l1 ? l1 : l2;
    l = dummy->next;
    delete dummy;
    return l;
}

ListNode *helper(vector<ListNode *> &lists, int l, int r) {
    if (r - l == 0) {
        return nullptr;
    } else if (r - l == 1) {
        return lists[l];
    }
    int m = l + (r - l - 1) / 2;
    return merge2list(helper(lists, l, m + 1), helper(lists, m + 1, r));
}

ListNode *merge_k_list(vector<ListNode *> &lists) {
    return helper(lists, 0, lists.size());
}
```

# 24 两两交换链表中的节点

给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。

你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。

```c++
ListNode *swap_pair(ListNode *head) {
    auto dummy = new ListNode(0, head);
    auto p = dummy;
    while (p->next && p->next->next) {
        auto p1 = p->next;
        p->next = p1->next;
        p1->next = p->next->next;
        p->next->next = p1;
        p = p1;
    }
    head = dummy->next;
    delete dummy;
    return head;
}
```

# 25 K 个一组翻转链表

给你一个链表，每 k 个节点一组进行翻转，请你返回翻转后的链表。

k 是一个正整数，它的值小于或等于链表的长度。

如果节点总数不是 k 的整数倍，那么请将最后剩余的节点保持原有顺序。

进阶：

- 你可以设计一个只使用常数额外空间的算法来解决此问题吗？
- 你不能只是单纯的改变节点内部的值，而是需要实际进行节点交换。

```c++
ListNode *reverse(ListNode *head) {
    ListNode *p0 = nullptr;
    auto p1 = head;
    while (p1) {
        auto p2 = p1->next;
        p1->next = p0;
        p0 = p1;
        p1 = p2;
    }
    return p0;
}

ListNode *reverse_k_group(ListNode *head, int k) {
    auto dummy = new ListNode(0, head);
    auto p0 = dummy;
    auto p1 = head;
    while (p1) {
        auto p2 = p0;
        for (int i = 0; i < k; i++) {
            p2 = p2->next;
            if (!p2) {
                break;
            }
        }
        if (p2) {
            auto p1_new = p2->next;
            p2->next = nullptr;
            p0->next = reverse(p0->next);
            p1->next = p1_new;
            p0 = p1;
            p1 = p1_new;
        } else {
            p1 = nullptr;
        }
    }
    head = dummy->next;
    delete dummy;
    return head;
}
```

# 83 删除排序链表中的重复元素

给定一个排序链表，删除所有重复的元素，使得每个元素只出现一次。

```c++
ListNode *rm_duplicate(ListNode *head) {
    auto p = head;
    while (p && p->next) {
        if (p->next->val == p->val) {
            auto p1 = p->next;
            p->next = p1->next;
            delete p1;
        } else {
            p = p->next;
        }
    }
    return head;
}
```

# 92 反转链表 II

反转从位置 m 到 n 的链表。请使用一趟扫描完成反转。

说明:
1 ≤ m ≤ n ≤ 链表长度。

```c++
ListNode *reverse_between(ListNode *head, int m, int n) {
    auto dummy = new ListNode(0);
    auto p0 = dummy;
    int i = 1;
    while (i < m) {
        i++;
        p0 = p0->next;
    }
    auto pre = p0;
    auto p1 = p0->next;
    while (i <= n) {
        i++;
        auto p2 = p1->next;
        p1->next = pre;
        pre = p1;
        p1 = p2;
    }
    p0->next->next = p1;
    p0->next = pre;
    head = dummy->next;
    delete dummy;
    return head;
}
```

# 138 复制带随机指针的链表

给你一个长度为 n 的链表，每个节点包含一个额外增加的随机指针 random ，该指针可以
指向链表中的任何节点或空节点。

构造这个链表的 深拷贝。 深拷贝应该正好由 n 个 全新 节点组成，其中每个新节点的值
都设为其对应的原节点的值。新节点的 next 指针和 random 指针也都应指向复制链表中的
新节点，并使原链表和复制链表中的这些指针能够表示相同的链表状态。复制链表中的指针
都不应指向原链表中的节点 。

例如，如果原链表中有 X 和 Y 两个节点，其中 X.random --> Y 。那么在复制链表中对应
的两个节点 x 和 y ，同样有 x.random --> y 。

返回复制链表的头节点。

```c++
Node *copy_random_list(Node *head) {
    // 交错放置新节点与老节点
    auto p = head;
    while (p) {
        auto p1 = new Node(p->val);
        p1->next = p->next;
        p->next = p1;
        p = p1->next;
    }
    // 更正 random 指针
    p = head;
    while (p) {
        p->next->random = p->random ? p->random->next : nullptr;
        p = p->next->next;
    }
    // 更正 next 指针
    auto head1 = head ? head->next : nullptr;
    p = head;
    while (p) {
        auto p1 = p->next;
        p->next = p1->next;
        p1->next = p->next ? p->next->next : nullptr;
        p = p->next;
    }
    return head1;
}
```

# 141 环形链表

给定一个链表，判断链表中是否有环。

如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了
表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开
始）。 如果 pos 是 -1，则在该链表中没有环。注意：pos 不作为参数进行传递，仅仅是
为了标识链表的实际情况。

如果链表中存在环，则返回 true 。 否则，返回 false 。

```c++
bool has_cycle(ListNode *head) {
    auto s = head;
    auto f = head;
    while (f && f->next) {
        f = f->next->next;
        s = s->next;
        if (f == s) {
            return true;
        }
    }
    return false;
}
```

# 142 环形链表 II

给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。

为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从
0 开始）。 如果 pos 是 -1，则在该链表中没有环。注意，pos 仅仅是用于标识环的情
况，并不会作为参数传递到函数中。

说明：不允许修改给定的链表。

进阶：

- 你是否可以使用 O(1) 空间解决此题？

```c++
ListNode *detect_cycle(ListNode *head) {
    auto s = head;
    auto f = head;
    // 找快慢指针的相遇点
    while (f && f->next) {
        f = f->next->next;
        s = s->next;
        if (f == s) {
            // 找环的起点
            f = head;
            while (f != s) {
                f = f->next;
                s = s->next;
            }
            return f;
        }
    }
    return nullptr;
}
```

# 148 链表排序

给你链表的头结点 head，请将其按升序排列并返回排序后的链表。

## 自底向上归并排序

- 时间复杂度：$O(n\log n)$
- 空间复杂度：$O(1)$

```c++
ListNode *merge(ListNode *h1, ListNode *h2) {
    auto dummy = new ListNode(0);
    auto p = dummy;
    while (h1 && h2) {
        if (h1->val <= h2->val) {
            p->next = h1;
            h1 = h1->next;
        } else {
            p->next = h2;
            h2 = h2->next;
        }
        p = p->next;
    }
    p->next = h1 ? h1 : h2;
    auto h = dummy->next;
    delete dummy;
    return h;
}

ListNode *sort_list(ListNode *head) {
    int n = 0;
    auto p = head;
    while (p) {
        n++;
        p = p->next;
    }
    auto dummy= new ListNode(0, head);
    for (int sub_size = 1; sub_size < n; sub_size <<= 1) {
        auto p0 = dummy;
        p = dummy->next;
        while (p) {
            auto h1 = p;
            for (int i = 1; i < sub_size && p->next; i++) {
                p = p->next;
            }
            auto h2 = p->next;
            p->next = nullptr;
            p = h2;
            for (int i = 1; i < sub_size && p && p->next; i++) {
                p = p->next;
            }
            ListNode *p_new = nullptr;
            if (p) {
                p_new = p->next;
                p->next = nullptr;
            }
            p0->next = merge(h1, h2);
            while (p0->next) {
                p0 = p0->next;
            }
            p = p_new;
        }
    }
    head = dummy->next;
    delete dummy;
    return head;
}
```

# 206 反转链表

反转一个单链表。

示例:

输入: 1->2->3->4->5->NULL

输出: 5->4->3->2->1->NULL

- 时间复杂度：$O(n)$
- 空间复杂度：$O(1)$

```c++
ListNode *reverse_list(ListNode *head) {
    ListNode *p0 = nullptr;
    auto p1 = head;
    while (p1) {
        auto p2 = p1->next;
        p1->next = p0;
        p0 = p1;
        p1 = p2;
    }
    return p0;
}
```
