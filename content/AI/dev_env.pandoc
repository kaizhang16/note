---
title: "开发环境"
---

# CUDA

| CUDA 版本 | 驱动版本     |
|-----------|--------------|
| CUDA 11.1 | >= 455.23.04 |
| CUDA 11.0 | >= 450.36.06 |
| CUDA 10.2 | >= 440.33    |
| CUDA 10.1 | >= 418.39    |

: CUDA 与驱动的版本对应关系[@cuda_driver_version] {#tbl:cuda_driver_version}

## 安装驱动

### Ubuntu

```sh
sudo add-apt-repository ppa:graphics-drivers/ppa
ubuntu-drivers devices  # 查看推荐的驱动
sudo apt install nvidia-430  # 安装驱动
```

# Docker

## Docker >= 19.03

```sh
docker run --gpus=all --shm-size=64G kaizhang91/cuda:10.2 nvidia-smi
```

## Docker < 19.03

```sh
nvidia-docker run --shm-size=64G kaizhang91/cuda:10.2 nvidia-smi
```

# Jupyter Lab

## 安装

```sh
pip install jupyterlab
```

## 使用

```sh
jupyter lab
```

# Jupyter

## jupyter_contrib_nbextensions

### 安装

```sh
pip install jupyter_contrib_nbextensions
jupyter contrib nbextension install --user
```

### 使用

打开 `http://<host>:<port>/nbextensions` 管理。

# PyTorch

## 安装

```sh
pip install torch torchvision
```

## 计算精度

```py
correct = 0
total = 0
with torch.no_grad():
    for data in testloader:
        images, labels = data
        outputs = net(images)
        _, predicted = torch.max(outputs.data, 1)
        total += labels.size(0)
        correct += (predicted == labels).sum().item()

print('Accuracy of the network on the 10000 test images: %d %%' % (
    100 * correct / total))
```

## 模型

- evaluate 模型时，代码需要包含在 `with torch.no_grad():` 里，避免计算梯度

## Tensor

- Tensor 可以用 GPU 加速计算
- 带 `_` 后缀的方法改变张量
- Tensor 在 CPU 上时，与 NumPy array 共享内存

| Tensor 方法    | 含义                                       |
|----------------|--------------------------------------------|
| `size()`       | 得到维数                                   |
| `view()`       | resize（某个 size 为 -1 时用其他维数推断） |
| `item()`       | 得到里面的数字                             |
| `numpy()`      | 返回 NumPy array                           |
| `from_numpy()` | 由 NumPy array 得到张量                    |
| `detach()`     | 不再参与计算                               |

: torch.Tensor 常用方法 {#tbl:torch_methods}

## device

```py
device = torch.device("cuda")
```

## Module

`net.zero_grad()` 可以清空存在的梯度，不然梯度会累积。

# 参考文献
